{
  "version": 3,
  "sources": ["../../../../src/primitives/code/code.tsx"],
  "sourcesContent": ["import React, {forwardRef} from 'react'\nimport Refractor from 'react-refractor'\nimport styled from 'styled-components'\nimport {responsiveCodeFontStyle, ResponsiveFontStyleProps} from '../../styles/internal'\nimport {codeBaseStyle} from './styles'\n\ninterface CodeProps {\n  as?: React.ElementType | keyof JSX.IntrinsicElements\n  language?: string\n  size?: number | number[]\n  weight?: string\n}\n\nconst Root = styled.pre<ResponsiveFontStyleProps>(codeBaseStyle, responsiveCodeFontStyle)\n\nexport const Code = forwardRef(\n  (props: CodeProps & Omit<React.HTMLProps<HTMLElement>, 'size'>, ref) => {\n    const {children, language: languageProp, size = 2, weight, ...restProps} = props\n    const language = typeof languageProp === 'string' ? languageProp : undefined\n    const registered = language ? Refractor.hasLanguage(language as any) : false\n\n    return (\n      <Root data-ui=\"Code\" {...restProps} $size={size} $weight={weight} ref={ref}>\n        {!(language && registered) && <code>{children}</code>}\n        {language && registered && (\n          <Refractor inline language={language} value={String(children)} />\n        )}\n      </Root>\n    )\n  }\n)\n\nCode.displayName = 'Code'\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAgC;AAChC,6BAAsB;AACtB,+BAAmB;AACnB,sBAAgE;AAChE,oBAA4B;AAS5B,MAAM,OAAO,iCAAO,IAA8B,6BAAe;AAE1D,MAAM,OAAO,6BAClB,CAAC,OAA+D,QAAQ;AACtE,QAA2E,YAApE,WAAU,UAAU,cAAc,OAAO,GAAG,UAAwB,IAAb,sBAAa,IAAb,CAAvD,YAAU,YAAwB,QAAU;AACnD,QAAM,WAAW,OAAO,iBAAiB,WAAW,eAAe;AACnE,QAAM,aAAa,WAAW,+BAAU,YAAY,YAAmB;AAEvE,SACE,mDAAC,MAAD;AAAA,IAAM,WAAQ;AAAA,KAAW,YAAzB;AAAA,IAAoC,OAAO;AAAA,IAAM,SAAS;AAAA,IAAQ;AAAA,MAC/D,CAAE,aAAY,eAAe,mDAAC,QAAD,MAAO,WACpC,YAAY,cACX,mDAAC,gCAAD;AAAA,IAAW,QAAM;AAAA,IAAC;AAAA,IAAoB,OAAO,OAAO;AAAA;AAAA;AAO9D,KAAK,cAAc;",
  "names": []
}
