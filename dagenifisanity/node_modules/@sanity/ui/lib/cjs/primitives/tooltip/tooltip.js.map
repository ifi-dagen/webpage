{
  "version": 3,
  "sources": ["../../../../src/primitives/tooltip/tooltip.tsx"],
  "sourcesContent": ["import React, {cloneElement, forwardRef, useCallback, useEffect, useState} from 'react'\nimport {usePopper} from 'react-popper'\nimport styled from 'styled-components'\nimport {useForwardedRef} from '../../hooks'\nimport {Placement} from '../../types'\nimport {Layer, Portal, useBoundaryElement} from '../../utils'\nimport {Card} from '../card'\nimport {TooltipArrow} from './tooltipArrow'\n\nexport interface TooltipProps {\n  allowedAutoPlacements?: Placement[]\n  boundaryElement?: HTMLElement | null\n  children?: React.ReactElement\n  content?: React.ReactNode\n  disabled?: boolean\n  fallbackPlacements?: Placement[]\n  placement?: Placement\n  portal?: boolean\n}\n\nconst Root = styled(Layer)`\n  pointer-events: none;\n`\n\nexport const Tooltip = forwardRef(\n  (\n    props: TooltipProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'children' | 'content'>,\n    ref\n  ) => {\n    const boundaryElementContext = useBoundaryElement()\n    const {\n      allowedAutoPlacements,\n      boundaryElement = boundaryElementContext?.element,\n      children,\n      content,\n      disabled,\n      fallbackPlacements,\n      placement = 'bottom',\n      portal,\n      ...restProps\n    } = props\n    const forwardedRef = useForwardedRef(ref)\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n    const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null)\n    const [arrowElement, setArrowElement] = useState<HTMLDivElement | null>(null)\n    const popper = usePopper(referenceElement, popperElement, {\n      placement,\n      modifiers: [\n        {\n          name: 'arrow',\n          options: {\n            element: arrowElement,\n            padding: 4,\n          },\n        },\n        {\n          name: 'preventOverflow',\n          options: {\n            altAxis: true,\n            boundary: boundaryElement || undefined,\n            padding: 4,\n          },\n        },\n        {\n          name: 'offset',\n          options: {offset: [0, 3]},\n        },\n        {\n          name: 'flip',\n          options: {\n            allowedAutoPlacements,\n            fallbackPlacements,\n          },\n        },\n      ],\n    })\n    const {forceUpdate} = popper\n    const [isOpen, setIsOpen] = useState(false)\n    const handleBlur = useCallback(() => setIsOpen(false), [])\n    const handleFocus = useCallback(() => setIsOpen(true), [])\n    const handleMouseEnter = useCallback(() => setIsOpen(true), [])\n    const handleMouseLeave = useCallback(() => setIsOpen(false), [])\n\n    useEffect(() => {\n      if (forceUpdate) forceUpdate()\n    }, [forceUpdate, content])\n\n    const setRef = (el: HTMLDivElement | null) => {\n      setPopperElement(el)\n      forwardedRef.current = el\n    }\n\n    if (!children) return <></>\n\n    if (disabled) return children\n\n    const referenceProps = {\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      ref: setReferenceElement,\n    }\n\n    const referenceNode = cloneElement(children, referenceProps)\n\n    const popperNode = (\n      <Root\n        data-ui=\"Tooltip\"\n        {...restProps}\n        ref={setRef}\n        style={popper.styles.popper}\n        {...popper.attributes.popper}\n      >\n        <Card radius={2} shadow={3}>\n          {content}\n          <TooltipArrow ref={setArrowElement} style={popper.styles.arrow} />\n        </Card>\n      </Root>\n    )\n\n    return (\n      <>\n        {referenceNode}\n\n        {isOpen && (\n          <>\n            {portal && <Portal>{popperNode}</Portal>}\n            {!portal && popperNode}\n          </>\n        )}\n      </>\n    )\n  }\n)\n\nTooltip.displayName = 'Tooltip'\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAgF;AAChF,0BAAwB;AACxB,+BAAmB;AACnB,mBAA8B;AAE9B,mBAAgD;AAChD,kBAAmB;AACnB,0BAA2B;AAa3B,MAAM,OAAO,sCAAO;AAAA;AAAA;AAIb,MAAM,UAAU,6BACrB,CACE,OACA,QACG;AACH,QAAM,yBAAyB;AAC/B,QAUI,YATF;AAAA;AAAA,IACA,kBAAkB,iEAAwB;AAAA,IAC1C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,MAEE,IADC,sBACD,IADC;AAAA,IARH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGF,QAAM,eAAe,kCAAgB;AACrC,QAAM,CAAC,kBAAkB,uBAAuB,2BAA6B;AAC7E,QAAM,CAAC,eAAe,oBAAoB,2BAAgC;AAC1E,QAAM,CAAC,cAAc,mBAAmB,2BAAgC;AACxE,QAAM,SAAS,mCAAU,kBAAkB,eAAe;AAAA,IACxD;AAAA,IACA,WAAW;AAAA,MACT;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS;AAAA,UACT,SAAS;AAAA;AAAA;AAAA,MAGb;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS;AAAA,UACT,UAAU,mBAAmB;AAAA,UAC7B,SAAS;AAAA;AAAA;AAAA,MAGb;AAAA,QACE,MAAM;AAAA,QACN,SAAS,CAAC,QAAQ,CAAC,GAAG;AAAA;AAAA,MAExB;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP;AAAA,UACA;AAAA;AAAA;AAAA;AAAA;AAKR,QAAM,CAAC,eAAe;AACtB,QAAM,CAAC,QAAQ,aAAa,2BAAS;AACrC,QAAM,aAAa,8BAAY,MAAM,UAAU,QAAQ;AACvD,QAAM,cAAc,8BAAY,MAAM,UAAU,OAAO;AACvD,QAAM,mBAAmB,8BAAY,MAAM,UAAU,OAAO;AAC5D,QAAM,mBAAmB,8BAAY,MAAM,UAAU,QAAQ;AAE7D,8BAAU,MAAM;AACd,QAAI;AAAa;AAAA,KAChB,CAAC,aAAa;AAEjB,QAAM,SAAS,CAAC,OAA8B;AAC5C,qBAAiB;AACjB,iBAAa,UAAU;AAAA;AAGzB,MAAI,CAAC;AAAU,WAAO;AAEtB,MAAI;AAAU,WAAO;AAErB,QAAM,iBAAiB;AAAA,IACrB,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,cAAc;AAAA,IACd,cAAc;AAAA,IACd,KAAK;AAAA;AAGP,QAAM,gBAAgB,+BAAa,UAAU;AAE7C,QAAM,aACJ,mDAAC,MAAD;AAAA,IACE,WAAQ;AAAA,KACJ,YAFN;AAAA,IAGE,KAAK;AAAA,IACL,OAAO,OAAO,OAAO;AAAA,MACjB,OAAO,WAAW,SAEtB,mDAAC,kBAAD;AAAA,IAAM,QAAQ;AAAA,IAAG,QAAQ;AAAA,KACtB,SACD,mDAAC,kCAAD;AAAA,IAAc,KAAK;AAAA,IAAiB,OAAO,OAAO,OAAO;AAAA;AAK/D,SACE,wFACG,eAEA,UACC,wFACG,UAAU,mDAAC,qBAAD,MAAS,aACnB,CAAC,UAAU;AAAA;AAQxB,QAAQ,cAAc;",
  "names": []
}
