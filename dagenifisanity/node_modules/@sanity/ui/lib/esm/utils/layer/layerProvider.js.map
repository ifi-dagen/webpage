{
  "version": 3,
  "sources": ["../../../../src/utils/layer/layerProvider.tsx"],
  "sourcesContent": ["import React, {useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {useMediaIndex, useResponsiveProp} from '../../hooks'\nimport {LayerContext, LayerContextValue} from './layerContext'\n\nexport function LayerProvider({\n  children,\n  zOffset: zOffsetProp = 0,\n}: {\n  children?: React.ReactNode\n  zOffset?: number | number[]\n}) {\n  const parent = useContext(LayerContext)\n  const zOffset = useResponsiveProp(zOffsetProp)\n  const maxMediaIndex = zOffset.length - 1\n  const mediaIndex = Math.min(useMediaIndex(), maxMediaIndex)\n  const zIndex = parent ? parent.zIndex + zOffset[mediaIndex] : zOffset[mediaIndex]\n  const [size, setSize] = useState(0)\n\n  const registerChild = useCallback(() => {\n    setSize((v) => v + 1)\n\n    return () => setSize((v) => v - 1)\n  }, [])\n\n  const parentRegisterChild = parent?.registerChild\n\n  useEffect(() => {\n    if (!parentRegisterChild) return\n\n    return parentRegisterChild()\n  }, [parentRegisterChild])\n\n  const value: LayerContextValue = useMemo(\n    () => ({version: 0.0, isTopLayer: size === 0, registerChild, size, zIndex}),\n    [size, registerChild, zIndex]\n  )\n\n  return <LayerContext.Provider value={value}>{children}</LayerContext.Provider>\n}\n"],
  "mappings": "AAAA;AACA;AACA;AAEO,uBAAuB;AAAA,EAC5B;AAAA,EACA,SAAS,cAAc;AAAA,GAItB;AACD,QAAM,SAAS,WAAW;AAC1B,QAAM,UAAU,kBAAkB;AAClC,QAAM,gBAAgB,QAAQ,SAAS;AACvC,QAAM,aAAa,KAAK,IAAI,iBAAiB;AAC7C,QAAM,SAAS,SAAS,OAAO,SAAS,QAAQ,cAAc,QAAQ;AACtE,QAAM,CAAC,MAAM,WAAW,SAAS;AAEjC,QAAM,gBAAgB,YAAY,MAAM;AACtC,YAAQ,CAAC,MAAM,IAAI;AAEnB,WAAO,MAAM,QAAQ,CAAC,MAAM,IAAI;AAAA,KAC/B;AAEH,QAAM,sBAAsB,iCAAQ;AAEpC,YAAU,MAAM;AACd,QAAI,CAAC;AAAqB;AAE1B,WAAO;AAAA,KACN,CAAC;AAEJ,QAAM,QAA2B,QAC/B,MAAO,EAAC,SAAS,GAAK,YAAY,SAAS,GAAG,eAAe,MAAM,UACnE,CAAC,MAAM,eAAe;AAGxB,SAAO,oCAAC,aAAa,UAAd;AAAA,IAAuB;AAAA,KAAe;AAAA;",
  "names": []
}
